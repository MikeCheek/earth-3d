{"version":3,"file":"static/js/607.41f80fb8.chunk.js","mappings":"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","sources":["components/Earth/index.tsx","components/Planet/index.tsx","components/Ring/index.tsx","components/Scene/index.tsx"],"sourcesContent":["import { useFrame, useLoader } from '@react-three/fiber';\r\nimport React, { useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { BufferGeometry, Mesh, TextureLoader, Vector3 } from 'three';\r\nimport EarthDayMap from '../../assets/textures/earth_daymap.jpg';\r\n// import EarthNightMap from '../../assets/textures/earth_nightmap.jpg';\r\nimport EarthNormalMap from '../../assets/textures/earth_normal_map.jpg';\r\nimport EarthSpecularMap from '../../assets/textures/earth_specular_map.jpg';\r\nimport EarthCloudsMap from '../../assets/textures/earth_clouds.jpg';\r\nimport { OrbitControls } from '@react-three/drei';\r\n\r\nconst Index = ({ position, radius = 1 }: { position?: Vector3; radius?: number }) => {\r\n  const [colorMap, normalMap, specularMap, cloudsMap] = useLoader(TextureLoader, [\r\n    EarthDayMap,\r\n    EarthNormalMap,\r\n    EarthSpecularMap,\r\n    EarthCloudsMap,\r\n  ]);\r\n\r\n  const earthRef = useRef<Mesh<BufferGeometry, any>>(null);\r\n  const cloudsRef = useRef<Mesh<BufferGeometry, any>>(null);\r\n\r\n  useFrame(({ clock }) => {\r\n    const elapsedTime = clock.getElapsedTime();\r\n    if (earthRef.current) earthRef.current.rotation.y = elapsedTime / 10;\r\n    if (cloudsRef.current) cloudsRef.current.rotation.y = elapsedTime / 8;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <mesh ref={cloudsRef} position={position ?? [0, 0, 0]}>\r\n        <sphereGeometry args={[radius * 1.005, 32, 32]} />\r\n        {/* @ts-ignore */}\r\n        <meshPhongMaterial map={cloudsMap} opacity={0.4} depthWrite transparent side={THREE.DoubleSide} />\r\n      </mesh>\r\n      <mesh ref={earthRef} position={position ?? [0, 0, 0]}>\r\n        <sphereGeometry args={[radius, 32, 32]} />\r\n        <meshPhongMaterial specularMap={specularMap} />\r\n        <meshStandardMaterial map={colorMap} normalMap={normalMap} metalness={0.4} roughness={0.7} />\r\n        <OrbitControls enableRotate enablePan enableZoom zoomSpeed={0.6} panSpeed={0.5} rotateSpeed={0.4} />\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import { useFrame, useLoader, Vector3 } from '@react-three/fiber';\r\nimport React, { useRef } from 'react';\r\nimport { BufferGeometry, Mesh, TextureLoader } from 'three';\r\n\r\nconst Index = ({\r\n  map,\r\n  revolution = 10,\r\n  position,\r\n  radius = 1,\r\n  transparent = false,\r\n}: {\r\n  map: string;\r\n  revolution?: number;\r\n  position: Vector3;\r\n  radius?: number;\r\n  transparent?: boolean;\r\n}) => {\r\n  const [loadedMap] = useLoader(TextureLoader, [map]);\r\n\r\n  const planetRef = useRef<Mesh<BufferGeometry, any>>(null);\r\n\r\n  useFrame(({ clock }) => {\r\n    const elapsedTime = clock.getElapsedTime();\r\n    if (planetRef.current) planetRef.current.rotation.y = elapsedTime / revolution;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <mesh ref={planetRef} position={position}>\r\n        <sphereGeometry args={[radius, 32, 32]} />\r\n        <meshStandardMaterial map={loadedMap} metalness={0.4} roughness={0.7} transparent={transparent} />\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import { useLoader, Vector3 } from '@react-three/fiber';\r\nimport React from 'react';\r\nimport { TextureLoader } from 'three';\r\n\r\nconst Index = ({ position, ring }: { position: Vector3; ring: string }) => {\r\n  const [loadedMap] = useLoader(TextureLoader, [ring]);\r\n\r\n  return (\r\n    <>\r\n      <mesh position={position} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <meshBasicMaterial map={loadedMap} />\r\n        <ringBufferGeometry args={[1.1, 1.4, 32]} />\r\n      </mesh>\r\n      <mesh position={position} rotation={[Math.PI / 2, 0, 0]}>\r\n        <meshBasicMaterial map={loadedMap} />\r\n        <ringBufferGeometry args={[1.1, 1.4, 32]} />\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import { Canvas } from '@react-three/fiber';\r\nimport React from 'react';\r\nimport Earth from '../Earth';\r\nimport MarsMap from '../../assets/textures/mars.jpg';\r\nimport VenusMap from '../../assets/textures/venus.jpg';\r\nimport SaturnMap from '../../assets/textures/saturn.jpg';\r\nimport SunMap from '../../assets/textures/sun.jpg';\r\nimport SaturnRing from '../../assets/textures/saturn_ring.png';\r\nimport Planet from '../Planet';\r\nimport { Stars } from '@react-three/drei';\r\nimport Ring from '../Ring';\r\n\r\nconst Index = () => {\r\n  return (\r\n    <Canvas>\r\n      <Stars radius={300} depth={60} count={20000} factor={7} saturation={0} fade />\r\n      <ambientLight intensity={0.4} />\r\n      <pointLight color=\"#f6f3ea\" position={[0, 0, 10]} intensity={1.5} />\r\n      <Earth />\r\n      <Planet map={MarsMap} position={[5, 0, -2]} />\r\n      <Planet map={VenusMap} position={[-5, 0, 5]} />\r\n      <Planet map={SaturnMap} position={[4, 0, 4]} />\r\n      <Ring ring={SaturnRing} position={[4, 0, 4]} />\r\n      <Planet map={SunMap} position={[0, 0, 10]} radius={5} transparent />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"],"names":["position","radius","useLoader","TextureLoader","EarthDayMap","EarthNormalMap","EarthSpecularMap","EarthCloudsMap","colorMap","normalMap","specularMap","cloudsMap","earthRef","useRef","cloudsRef","useFrame","elapsedTime","clock","getElapsedTime","current","rotation","y","ref","args","map","opacity","depthWrite","transparent","side","THREE","metalness","roughness","OrbitControls","enableRotate","enablePan","enableZoom","zoomSpeed","panSpeed","rotateSpeed","revolution","loadedMap","planetRef","ring","Math","PI","Stars","depth","count","factor","saturation","fade","intensity","color","Earth","Planet","MarsMap","VenusMap","SaturnMap","Ring","SaturnRing","SunMap"],"sourceRoot":""}